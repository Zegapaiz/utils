const zz = (function() {
  function e(t, n, r) {
    function s(o, u) {
      if (!n[o]) {
        if (!t[o]) {
          var a = typeof require == "function" && require;
          if (!u && a) return a(o, !0);
          if (i) return i(o, !0);
          var f = new Error("Cannot find module '" + o + "'");
          throw ((f.code = "MODULE_NOT_FOUND"), f);
        }
        var l = (n[o] = { exports: {} });
        t[o][0].call(
          l.exports,
          function(e) {
            var n = t[o][1][e];
            return s(n ? n : e);
          },
          l,
          l.exports,
          e,
          t,
          n,
          r
        );
      }
      return n[o].exports;
    }
    var i = typeof require == "function" && require;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
  }
  return e;
})()(
  {
    1: [
      function(require, module, exports) {
        "use strict";
        var is = require("./is");
        var random = require("./random");
        module.exports = {
          is: is,
          random: random
        };
        // function hello(compiler: string) {
        //     console.log(`Hello from ${compiler}`)
        // }
        // hello("typescript")
      },
      { "./is": 2, "./random": 3 }
    ],
    2: [
      function(require, module, exports) {
        "use strict";
        // var isBuffer = require('is-buffer')
        //  from 'is-buffer'
        /*global toString:true*/
        var toString = Object.prototype.toString;
        /**
 *确定一个值是否是一个数组
 *
 * @param {Object} val 要测试的值
 * @returns {boolean} 如果value是一个数组，则返回true，否则返回false
 */
        function isArray(val) {
          return toString.call(val) === "[object Array]";
        }
        /**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
        function isArrayBuffer(val) {
          return toString.call(val) === "[object ArrayBuffer]";
        }
        /**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
        function isFormData(val) {
          return typeof FormData !== "undefined" && val instanceof FormData;
        }
        /**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
        function isArrayBufferView(val) {
          var result;
          if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
            result = ArrayBuffer.isView(val);
          } else {
            result = val && val.buffer && val.buffer instanceof ArrayBuffer;
          }
          return result;
        }
        /**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
        function isString(val) {
          return typeof val === "string";
        }
        /**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
        function isNumber(val) {
          return typeof val === "number";
        }
        /**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
        function isUndefined(val) {
          return typeof val === "undefined";
        }
        /**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
        function isObject(val) {
          return val !== null && typeof val === "object";
        }
        /**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
        function isDate(val) {
          return toString.call(val) === "[object Date]";
        }
        /**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
        function isFile(val) {
          return toString.call(val) === "[object File]";
        }
        /**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
        function isBlob(val) {
          return toString.call(val) === "[object Blob]";
        }
        /**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
        function isFunction(val) {
          return toString.call(val) === "[object Function]";
        }
        /**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
        function isStream(val) {
          return isObject(val) && isFunction(val.pipe);
        }
        /**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
        function isURLSearchParams(val) {
          return (
            typeof URLSearchParams !== "undefined" &&
            val instanceof URLSearchParams
          );
        }
        /**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
        function isStandardBrowserEnv() {
          if (
            typeof navigator !== "undefined" &&
            navigator.product === "ReactNative"
          ) {
            return false;
          }
          return (
            typeof window !== "undefined" && typeof document !== "undefined"
          );
        }
        module.exports = {
          Array: isArray,
          ArrayBuffer: isArrayBuffer,
          // Buffer: isBuffer,
          FormData: isFormData,
          ArrayBufferView: isArrayBufferView,
          String: isString,
          Number: isNumber,
          Object: isObject,
          Undefined: isUndefined,
          Date: isDate,
          File: isFile,
          Blob: isBlob,
          Function: isFunction,
          Stream: isStream,
          URLSearchParams: isURLSearchParams,
          StandardBrowserEnv: isStandardBrowserEnv
        };
      },
      {}
    ],
    3: [
      function(require, module, exports) {
        "use strict";
        /**
 *  产生一个随机颜色
 *
 * @param {Object} val
 * @returns {color}
 */
        function RandomColor() {
          return (
            "#" +
            ("00000" + ((Math.random() * 0x1000000) << 0).toString(16)).substr(
              -6
            )
          );
        }
        module.exports = RandomColor;
      },
      {}
    ]
  },
  {},
  [1]
);
console.log(zz)